//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class MADAutoAssetPersisted, NSMutableDictionary, SUCoreLog;
@protocol OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface MADAutoAssetLocker : NSObject
{
    SUCoreLog *_logger;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_lockerQueue;	// 16 = 0x10
    MADAutoAssetPersisted *_persistedState;	// 24 = 0x18
    NSMutableDictionary *_eliminateSelectors;	// 32 = 0x20
}

+ (id)copyOfSetLocksByDescriptor;	// IMP=0x00600000001d79b8
+ (id)newCurrentSetLockUsageForDescriptor:(id)arg1;	// IMP=0x00600000001d6e4a
+ (id)eliminateAllPreviousSetLocksNoLongerTracked:(id)arg1;	// IMP=0x00600000001d6bbe
+ (id)eliminateAllPreviousSetLocksByClient:(id)arg1 forSetDescriptor:(id)arg2;	// IMP=0x00600000001d6821
+ (_Bool)endedAllPreviousSetLocksByClient:(id)arg1 forSetDescriptor:(id)arg2 forLockReason:(id)arg3 endError:(id *)arg4;	// IMP=0x00600000001d5de3
+ (_Bool)endedPreviousSetLocksByClient:(id)arg1 forSetDescriptor:(id)arg2 forLockReason:(id)arg3 removingLockCount:(long long)arg4 endError:(id *)arg5;	// IMP=0x00600000001d52d9
+ (_Bool)continuedSetLockByClient:(id)arg1 forSetDescriptor:(id)arg2 forLockReason:(id)arg3 withSetUsagePolicy:(id)arg4 continueError:(id *)arg5;	// IMP=0x00600000001d4884
+ (_Bool)lockedSetByClient:(id)arg1 lockingSetDescriptor:(id)arg2 forLockReason:(id)arg3 withSetUsagePolicy:(id)arg4 lockError:(id *)arg5;	// IMP=0x00600000001d3b0b
+ (id)currentSetLockUsageEliminatingOtherThanSetAtomicInstances:(id)arg1;	// IMP=0x00600000001d25d8
+ (void)forceGlobalUnlock:(id)arg1;	// IMP=0x00600000001d1d97
+ (void)addClientLockReasons:(id)arg1 basedOnControl:(id)arg2;	// IMP=0x00600000001d157b
+ (id)migrateMismatchedPersistedStateVersion:(id)arg1 forEntryID:(id)arg2 withMismatchedState:(id)arg3;	// IMP=0x00600000001ceca4
+ (long long)persistedLocksCount;	// IMP=0x00600000001ce143
+ (void)resumeFromPersistedWithDownloadedSelectors:(id)arg1;	// IMP=0x00600000001cd5ba
+ (id)lockedSelectorsForEliminate:(id)arg1;	// IMP=0x00600000001cc5ac
+ (id)copyOfLocksBySelector;	// IMP=0x00600000001cc392
+ (id)newCurrentLockUsageForSelector:(id)arg1;	// IMP=0x00600000001cb2a5
+ (_Bool)endedAllPreviousLocksByClient:(id)arg1 forAssetSelector:(id)arg2 forLockReason:(id)arg3 endError:(id *)arg4;	// IMP=0x00600000001c969d
+ (_Bool)endedPreviousLocksByClient:(id)arg1 forAssetSelector:(id)arg2 forLockReason:(id)arg3 removingLockCount:(long long)arg4 endError:(id *)arg5;	// IMP=0x00600000001c8e26
+ (_Bool)endedLockByClient:(id)arg1 forAssetSelector:(id)arg2 forLockReason:(id)arg3 endError:(id *)arg4;	// IMP=0x00600000001c872d
+ (_Bool)continuedLockByClient:(id)arg1 forAssetSelector:(id)arg2 forLockReason:(id)arg3 withUsagePolicy:(id)arg4 continueError:(id *)arg5;	// IMP=0x00600000001c7f87
+ (_Bool)lockedByClient:(id)arg1 forAssetSelector:(id)arg2 forLockReason:(id)arg3 withUsagePolicy:(id)arg4 withLocalContentURL:(id)arg5 withAssetAttributes:(id)arg6 lockError:(id *)arg7;	// IMP=0x00600000001c777a
+ (id)autoAssetLocker;	// IMP=0x00600000001c7725
- (void).cxx_destruct;	// IMP=0x00000000001da77d
@property(retain, nonatomic) NSMutableDictionary *eliminateSelectors; // @synthesize eliminateSelectors=_eliminateSelectors;
@property(readonly, retain, nonatomic) MADAutoAssetPersisted *persistedState; // @synthesize persistedState=_persistedState;
@property(readonly, retain, nonatomic) NSObject<OS_dispatch_queue> *lockerQueue; // @synthesize lockerQueue=_lockerQueue;
@property(readonly, retain, nonatomic) SUCoreLog *logger; // @synthesize logger=_logger;
- (id)newSetClientNameForDomain:(id)arg1 withAutoAssetClientName:(id)arg2 forSetAtomicInstance:(id)arg3;	// IMP=0x00000000001da6af
- (id)_setClientDomainNameForAssetLock:(id)arg1;	// IMP=0x00000000001da2c7
- (_Bool)_isUntrackedSetAssetLock:(id)arg1 forTrackedSetDescriptors:(id)arg2;	// IMP=0x00000000001d9e42
- (id)_endedLockByClient:(id)arg1 forClientDomainName:(id)arg2 forAssetSetIdentifier:(id)arg3 forAssetSelector:(id)arg4 forSetAtomicInstance:(id)arg5 forLockReason:(id)arg6;	// IMP=0x00000000001d9842
- (id)_endAllSetLocksNoLongerTracked:(id)arg1;	// IMP=0x00000000001d91cb
- (id)_endAllSetLocksByClient:(id)arg1 forSetDescriptor:(id)arg2;	// IMP=0x00000000001d8c1d
- (id)_continuedLockByClient:(id)arg1 forClientDomainName:(id)arg2 forAssetSetIdentifier:(id)arg3 forAssetSelector:(id)arg4 forSetAtomicInstance:(id)arg5 forLockReason:(id)arg6 withUsagePolicy:(id)arg7;	// IMP=0x00000000001d8557
- (id)_lockAutoAssetByClient:(id)arg1 forClientDomainName:(id)arg2 forAssetSetIdentifier:(id)arg3 forAssetSelector:(id)arg4 forSetAtomicInstance:(id)arg5 forLockReason:(id)arg6 withUsagePolicy:(id)arg7 withLocalContentURL:(id)arg8 withAssetAttributes:(id)arg9;	// IMP=0x00000000001d7f6c
- (id)setAtomicInstanceForUUID:(id)arg1 fromSetAtomicInstances:(id)arg2;	// IMP=0x00000000001d7d4c
- (id)atomicInstanceUUIDForLockTracker:(id)arg1;	// IMP=0x00000000001d7be8
- (_Bool)isAssetLockSetAtomicInstanceLock:(id)arg1;	// IMP=0x00000000001d79c0
- (id)_newAssetLockSummaryWithoutSelectorOrAttributes:(id)arg1;	// IMP=0x00000000001d1438
- (id)summary;	// IMP=0x00000000001d13aa
- (id)description;	// IMP=0x00000000001d1398
- (_Bool)_anyCurrentLocksForEliminate:(id)arg1;	// IMP=0x00000000001d0a28
- (id)_refreshFilesystemMetadataLastInterest:(id)arg1;	// IMP=0x00000000001d06ae
- (long long)locateLocksCurrentLocksCount;	// IMP=0x00000000001d0610
- (id)locateLocksNewAllBySelector;	// IMP=0x00000000001cffaf
- (id)locateLockBySelector:(id)arg1;	// IMP=0x00000000001cfc98
- (void)_logPersistedTableOfContents:(id)arg1;	// IMP=0x00000000001cf481
- (void)_logPersistedRemovedEntry:(id)arg1 removedAssetLock:(id)arg2 forSelector:(id)arg3 message:(id)arg4;	// IMP=0x00000000001cf0b9
- (void)_logPersistedEntry:(id)arg1 operation:(id)arg2 persistingAssetLock:(id)arg3 forSelector:(id)arg4 message:(id)arg5;	// IMP=0x00000000001cecac
- (_Bool)_endLockDecideUnlocked:(id)arg1;	// IMP=0x00000000001cec02
- (void)_mergeContinuedLock:(id)arg1 intoExistingLock:(id)arg2;	// IMP=0x00000000001cead4
- (void)_mergeAddedLock:(id)arg1 intoExistingLock:(id)arg2;	// IMP=0x00000000001ce94b
- (void)_persistRemoveAssetLock:(id)arg1 removedAssetLock:(id)arg2 message:(id)arg3;	// IMP=0x00000000001ce66a
- (_Bool)_persistAssetLock:(id)arg1 operation:(id)arg2 forAssetLock:(id)arg3 message:(id)arg4;	// IMP=0x00000000001ce324
- (void)_removeAssetLock:(id)arg1 lastClient:(id)arg2 forSelector:(id)arg3 message:(id)arg4;	// IMP=0x00000000001cd29d
- (id)_assetIDOfLock:(id)arg1;	// IMP=0x00000000001cb1ee
- (long long)_currentLockCountOfLock:(id)arg1;	// IMP=0x00000000001cafa5
- (_Bool)_endLocksByClient:(id)arg1 forAllClientNames:(_Bool)arg2 forClientDomainName:(id)arg3 forAssetSetIdentifier:(id)arg4 forAssetSelector:(id)arg5 forSetAtomicInstance:(id)arg6 forLockReason:(id)arg7 removingLockCount:(long long)arg8 endError:(id *)arg9;	// IMP=0x00000000001c9d77
- (id)init;	// IMP=0x00000000001c75d3

@end

